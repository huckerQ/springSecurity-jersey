<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.jersey.resource">
		<context:include-filter type="annotation"
			expression="javax.ws.rs.Path" />
		<context:include-filter type="annotation"
			expression="javax.ws.rs.ext.Provider" />
	</context:component-scan>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages_uk_UA"></property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl"
			value="jdbc:mysql://172.16.130.51:3306/demoq?createDatabaseIfNotExist=true" />
		<property name="user" value="root" />
		<property name="password" value="123" />

	</bean>





	<!-- Spring Security 配置 -->
	<security:http auto-config="true" access-denied-page="/accessDenied.jsp">
		<security:form-login login-page="/login.jsp"
			default-target-url="/index.jsp" authentication-failure-url="/accessDenied.jsp" />
		<security:logout logout-success-url="/login.jsp" />
		<!-- <security:intercept-url pattern="/login.jsp" filters="none" /> <security:intercept-url 
			pattern="/index.jsp" access="ROLE_USER,ROLE_ADMIN" /> <security:intercept-url 
			pattern="/user.jsp" access="ROLE_USER" /> <security:intercept-url pattern="/admin.jsp" 
			access="ROLE_ADMIN" /> <security:intercept-url pattern="/**" access="ROLE_USER" 
			/> -->

		<!-- 会话管理配置 -->
		<!-- <security:session-management invalid-session-url="/sessionTimeOut.html"> 
			<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/> 
			</security:session-management> -->


		<!--增加一个filter， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<security:custom-filter ref="myFilter"
			before="FILTER_SECURITY_INTERCEPTOR" />
	</security:http>

	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，   
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->  
    <bean id="myFilter" 
        class="utils.MyFilterSecurityInterceptor">  
        <property name="authenticationManager" ref="authenticationManager" />  
        <property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />  
        <property name="securityMetadataSource" ref="securityMetadataSource" />  
    </bean>  


	<!-- 启用annotation -->
	<security:global-method-security
		secured-annotations="enabled" jsr250-annotations="enabled" />


	<security:authentication-manager alias="authenticationManager">
	 <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
		<security:authentication-provider user-service-ref="myUserDetailService">
			<!-- <security:user-service> <security:user name="user" password="user" 
				authorities="ROLE_USER" /> </security:user-service> -->

			<!-- <security:jdbc-user-service
				data-source-ref="dataSource" /> -->
		</security:authentication-provider>
	</security:authentication-manager>


	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
    <bean id="myUserDetailService" class="utils.MyUserDetailService" />
 	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <bean id="myAccessDecisionManagerBean" 
        class="utils.MyAccessDecisionManager">  
    </bean>  
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->  
    <bean id="securityMetadataSource" 
        class="utils.MyInvocationSecurityMetadataSource" />

</beans>
